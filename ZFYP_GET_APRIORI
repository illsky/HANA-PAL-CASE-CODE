CREATE PROCEDURE sinopec_ypxs.ZFYP_GET_APRIORI(
IN SQLSELECT CLOB,
IN SQLWHERE CLOB,
IN PREWHERE string,
IN POSTWHERE string,
IN MIN_SUPPORT DOUBLE,
IN MIN_CONFIDENCE DOUBLE,
IN MIN_LIFT DOUBLE,
OUT OUT_TABNAM NVARCHAR(15),
OUT ERROR NVARCHAR(150)
)
LANGUAGE SQLSCRIPT 
AS
BEGIN
/*
修改记录：
--20140707 PWQLIU 创建；
--20140830 PHQZHAO 性能优化，减少了2次插入步骤；
--20141202 PHQZHAO 将结果输出到临时表中，输出表名；
--20141208 PHQZHAO 更改明细结果表的属性，从COLUMN改为ROW，优化插入性能；
--20141219 PHQZHAO 更新名称
--20150413 PHQZHAO 检查输入的基础数据表是否有数据
--20151103 PHQZHAO 创建临时表之前首先执行ZGG_SET_DELTEMPTABLE删除临时表；
功能描述：
--从数据源“销售商品柳树分析”Z1FX_XSSPLSFX，根据输入参数，结合APRIORI算法，得到商品/品类在交易流水中的关联关系；
*/
DECLARE APRIORI_EXIST INT;
DECLARE SQL_STR CLOB;
DECLARE SQL_STR2 CLOB;
DECLARE SQL_STR3 CLOB;
DECLARE PAL_TABLE_NAME CLOB;
DECLARE PAL_JYCS BIGINT ;     -------------同时交易次数
DECLARE LS_ZNUM BIGINT;
DECLARE FILTER_FLG STRING;
DECLARE RAND_OUT NVARCHAR(15);
DECLARE MYCOND1 CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE TAB_FLAG INTEGER := 0;
--sql异常情况捕捉
DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
  ERROR := ::SQL_ERROR_MESSAGE || ::SQL_ERROR_CODE;
END;
--创建结果明表的随机数临时表名
select '#T'||SUBSTRING(RAND(),8,10) into rand_out from dummy;
--------------配置参数
call SINOPEC_YPXS.ZGG_SET_DELTEMPTABLE('#LOCAL_RESULT');
CREATE LOCAL TEMPORARY COLUMN TABLE #LOCAL_RESULT LIKE SINOPEC_YPXS.FYP_SPLS_APRIORI;
RESULT_T = SELECT * FROM #LOCAL_RESULT;

call SINOPEC_YPXS.ZGG_SET_DELTEMPTABLE('#PAL_CONTROL_TBL');
CREATE LOCAL TEMPORARY COLUMN TABLE #PAL_CONTROL_TBL( "NAME" VARCHAR (50), 
"INTARGS" INTEGER, "DOUBLEARGS" DOUBLE,"STRINGARGS" VARCHAR (100));
INSERT INTO #PAL_CONTROL_TBL VALUES ('THREAD_NUMBER',15, null, null);
INSERT INTO #PAL_CONTROL_TBL VALUES ('MIN_SUPPORT', null, :MIN_SUPPORT, null);
INSERT INTO #PAL_CONTROL_TBL VALUES ('MIN_CONFIDENCE', null, :MIN_CONFIDENCE, null);
INSERT INTO #PAL_CONTROL_TBL VALUES ('MIN_LIFT', null, :MIN_LIFT, null);
INSERT INTO #PAL_CONTROL_TBL VALUES ('MAX_CONSEQUENT',1,null,null);
INSERT INTO #PAL_CONTROL_TBL VALUES ('MAXITEMLENGTH',2,null,null);

call SINOPEC_YPXS.ZGG_SET_DELTEMPTABLE('#PAL_APRIORI_DATA');
CREATE LOCAL TEMPORARY COLUMN TABLE #PAL_APRIORI_DATA(GZTYXSLSH VARCHAR(32),ITEM VARCHAR(60));
SQL_STR :='INSERT INTO #PAL_APRIORI_DATA(SELECT DISTINCT "GZTYXSLSH", '||
:SQLSELECT||
' FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-fyp/Z1FX_XSSPLSFX" WHERE GZBZSPBM IS NOT NULL AND GZBZPLDMC IS NOT NULL AND GZBZPLMC IS NOT NULL AND '||
:SQLWHERE||')';

EXEC SQL_STR;
PAL_DATA = SELECT * FROM #PAL_APRIORI_DATA ORDER BY GZTYXSLSH ASC;
--计算总流水数
SELECT COUNT(distinct GZTYXSLSH) INTO PAL_JYCS FROM #PAL_APRIORI_DATA;
PAL_CONTROL = SELECT * FROM #PAL_CONTROL_TBL;

--检查输入的基础数据表是否有数据
select max(1) into TAB_FLAG from dummy where not exists 
(select *  from :PAL_DATA);
if TAB_FLAG = 1 then 
--如果没有数据就报错并跳出
signal mycond1 set message_text = '基础数据没结果';
else
--如果有数据就继续执行PAL
 CALL _SYS_AFL.FYP_SPGLFX_APRIORI(:PAL_DATA,:PAL_CONTROL,:RESULT_T,?);
end if;
TAB_FLAG := 0;
DROP TABLE #PAL_CONTROL_TBL;
--将结果表插入到临时表#LOCAL_RESULT中
insert into #LOCAL_RESULT
select PRERULE,POSTRULE,KZFYSUPPORT,KZFYCONFIDENCE,KZFYLIFT from :RESULT_T;
--如果像下面这样，用临时表来接收输出表结果，就会导致HD0的宕机；
--CALL _SYS_AFL.FYP_SPGLFX_APRIORI(:PAL_DATA,:PAL_CONTROL,#LOCAL_RESULT,?)with overview;
--创建结果明细表
--SQL_STR2 := 'CREATE  LOCAL TEMPORARY  COLUMN TABLE '|| :RAND_OUT ||' LIKE sinopec_ypxs.FYP_SPLS_APRIORI_RT ';
--更改明细结果表的属性，从COLUMN改为ROW，优化插入性能
SQL_STR2 := 'CREATE  LOCAL TEMPORARY TABLE '|| :RAND_OUT ||' LIKE sinopec_ypxs.FYP_SPLS_APRIORI_RT ';
 EXEC SQL_STR2;
/*
--获得前项的占比 
 LS_B = SELECT ITEM,ROUND((COUNT(GZTYXSLSH)/PAL_JYCS)*100,2) QXZB FROM #PAL_APRIORI_DATA GROUP BY ITEM;
*/
--针对前项、后项的搜索值 提供不同的查询 
IF :PREWHERE = '' AND :POSTWHERE = ''
THEN
--获得前后项、支持度、置信度、LIFT值等
 --插入输出结果到临时表
SQL_STR3 := 'insert into '||:rand_out ||
 ' SELECT A.PRERULE,A.POSTRULE,A.KZFYSUPPORT,A.KZFYCONFIDENCE,A.KZFYLIFT,A.KZFYJYCS,A.KZFYQXCS,B.QXZB FROM  
  (SELECT PRERULE,POSTRULE,TO_DECIMAL(KZFYSUPPORT*100,17,4)as KZFYSUPPORT,
 TO_DECIMAL(KZFYCONFIDENCE*100,17,4)as KZFYCONFIDENCE,
 TO_DECIMAL(KZFYLIFT*100,17,4)as KZFYLIFT ,
 ROUND(KZFYSUPPORT*'||:PAL_JYCS||',0)AS KZFYJYCS,
 ROUND((KZFYSUPPORT*'||:PAL_JYCS||')/KZFYCONFIDENCE,0)as KZFYQXCS
 from  #LOCAL_RESULT order by KZFYJYCS  DESC)  
   AS A LEFT JOIN 
   (SELECT ITEM,ROUND((COUNT(GZTYXSLSH)/'||:PAL_JYCS||')*100,2) QXZB FROM #PAL_APRIORI_DATA GROUP BY ITEM)
    AS B ON A.PRERULE = B.ITEM ORDER BY  A.KZFYSUPPORT DESC';
EXEC SQL_STR3;
ELSE
IF :PREWHERE <> '' AND :POSTWHERE = '' THEN
--插入输出结果到临时表
SQL_STR3 := 'insert into '||:rand_out ||
 ' SELECT A.PRERULE,A.POSTRULE,A.KZFYSUPPORT,A.KZFYCONFIDENCE,A.KZFYLIFT,A.KZFYJYCS,A.KZFYQXCS,B.QXZB FROM  
  (SELECT PRERULE,POSTRULE,TO_DECIMAL(KZFYSUPPORT*100,17,4)as KZFYSUPPORT,
 TO_DECIMAL(KZFYCONFIDENCE*100,17,4)as KZFYCONFIDENCE,
 TO_DECIMAL(KZFYLIFT*100,17,4)as KZFYLIFT ,
 ROUND(KZFYSUPPORT*'||:PAL_JYCS||',0)AS KZFYJYCS,
 ROUND((KZFYSUPPORT*'||:PAL_JYCS||')/KZFYCONFIDENCE,0)as KZFYQXCS
 from  #LOCAL_RESULT  WHERE PRERULE LIKE '''||:PREWHERE ||''' order by KZFYJYCS  DESC)  
   AS A LEFT JOIN 
   (SELECT ITEM,ROUND((COUNT(GZTYXSLSH)/'||:PAL_JYCS||')*100,2) QXZB FROM #PAL_APRIORI_DATA GROUP BY ITEM)
    AS B ON A.PRERULE = B.ITEM   ORDER BY  A.KZFYSUPPORT DESC ';
EXEC SQL_STR3;
 

ELSEIF :PREWHERE = '' AND :POSTWHERE <> ''  THEN
--插入输出结果到临时表
SQL_STR3 := 'insert into '||:rand_out ||
 ' SELECT A.PRERULE,A.POSTRULE,A.KZFYSUPPORT,A.KZFYCONFIDENCE,A.KZFYLIFT,A.KZFYJYCS,A.KZFYQXCS,B.QXZB FROM  
  (SELECT PRERULE,POSTRULE,TO_DECIMAL(KZFYSUPPORT*100,17,4)as KZFYSUPPORT,
 TO_DECIMAL(KZFYCONFIDENCE*100,17,4)as KZFYCONFIDENCE,
 TO_DECIMAL(KZFYLIFT*100,17,4)as KZFYLIFT ,
 ROUND(KZFYSUPPORT*'||:PAL_JYCS||',0)AS KZFYJYCS,
 ROUND((KZFYSUPPORT*'||:PAL_JYCS||')/KZFYCONFIDENCE,0)as KZFYQXCS
 from  #LOCAL_RESULT  WHERE POSTRULE LIKE '''||:POSTWHERE ||''' order by KZFYJYCS  DESC)  
   AS A LEFT JOIN 
   (SELECT ITEM,ROUND((COUNT(GZTYXSLSH)/'||:PAL_JYCS||')*100,2) QXZB FROM #PAL_APRIORI_DATA GROUP BY ITEM)
    AS B ON A.PRERULE = B.ITEM   ORDER BY  A.KZFYSUPPORT DESC ';
EXEC SQL_STR3;

ELSEIF  :PREWHERE <> '' AND :POSTWHERE <> '' THEN

--插入输出结果到临时表
SQL_STR3 := 'insert into '||:rand_out ||
 ' SELECT A.PRERULE,A.POSTRULE,A.KZFYSUPPORT,A.KZFYCONFIDENCE,A.KZFYLIFT,A.KZFYJYCS,A.KZFYQXCS,B.QXZB FROM  
  (SELECT PRERULE,POSTRULE,TO_DECIMAL(KZFYSUPPORT*100,17,4)as KZFYSUPPORT,
 TO_DECIMAL(KZFYCONFIDENCE*100,17,4)as KZFYCONFIDENCE,
 TO_DECIMAL(KZFYLIFT*100,17,4)as KZFYLIFT ,
 ROUND(KZFYSUPPORT*'||:PAL_JYCS||',0)AS KZFYJYCS,
 ROUND((KZFYSUPPORT*'||:PAL_JYCS||')/KZFYCONFIDENCE,0)as KZFYQXCS
 from  #LOCAL_RESULT  WHERE POSTRULE LIKE '''|| :POSTWHERE||''' AND PRERULE LIKE '''||:PREWHERE ||''' order by KZFYJYCS  DESC)  
   AS A LEFT JOIN 
   (SELECT ITEM,ROUND((COUNT(GZTYXSLSH)/'||:PAL_JYCS||')*100,2) QXZB FROM #PAL_APRIORI_DATA GROUP BY ITEM)
    AS B ON A.PRERULE = B.ITEM   ORDER BY  A.KZFYSUPPORT DESC';
EXEC SQL_STR3;

END IF;
END IF;
OUT_TABNAM := :RAND_OUT;
DROP TABLE #PAL_APRIORI_DATA;
DROP TABLE #LOCAL_RESULT;
END;
