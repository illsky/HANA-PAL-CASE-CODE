CREATE PROCEDURE sinopec_ypxs.ZFYP_GET_PLLKFX(
IN OPTI VARCHAR(1),
IN SQLSEL string,
IN SQLWHERE string,
OUT RESULT1 sinopec_ypxs.FYP_TJFX_PLLKFX1,
OUT RESULT2 sinopec_ypxs.FYP_TJFX_PLLKFX2,
OUT MESSAGE VARCHAR(150)
) LANGUAGE SQLSCRIPT 
AS BEGIN
/*修改记录：
--20140911 PHQZHAO 创建；
--20141128 PHQZHAO 修改，输出的结果1中，将销售金额排序；
--20141201 PHQZHAO 修改，输出柱图排序；
--20141201 PHQZHAO 修改：增加MESSAGE（SQL异常）的输出
--20141219 PHQZHAO 更改名称
功能描述：
--从数据源“销售商品柳树分析”Z1FX_XSSPLSFX，根据输入参数
得到两种输出结果，一种是品类的PI值；一种是品类分时点的PI值；
*/
DECLARE SQL_STR CLOB;
DECLARE L1_INDEX INTEGER := 1;
DECLARE L2_INDEX INTEGER := 1;
DECLARE xy INTEGER := 1;
DECLARE XX DOUBLE;
DECLARE RLT_LMS VARCHAR(60) ARRAY  ;
DECLARE RLT_0  DOUBLE ARRAY ;
DECLARE RLT_1  DOUBLE ARRAY ;
DECLARE RLT_2  DOUBLE ARRAY ;
DECLARE RLT_3  DOUBLE ARRAY ;
DECLARE RLT_4  DOUBLE ARRAY ;
DECLARE RLT_5  DOUBLE ARRAY ;
DECLARE RLT_6  DOUBLE ARRAY ;
DECLARE RLT_7  DOUBLE ARRAY ;
DECLARE RLT_8  DOUBLE ARRAY ;
DECLARE RLT_9  DOUBLE ARRAY ;
DECLARE RLT_10  DOUBLE ARRAY ;
DECLARE RLT_11  DOUBLE ARRAY ;
DECLARE RLT_12  DOUBLE ARRAY ;
DECLARE RLT_13  DOUBLE ARRAY ;
DECLARE RLT_14  DOUBLE ARRAY ;
DECLARE RLT_15  DOUBLE ARRAY ;
DECLARE RLT_16  DOUBLE ARRAY ;
DECLARE RLT_17  DOUBLE ARRAY ;
DECLARE RLT_18  DOUBLE ARRAY ;
DECLARE RLT_19  DOUBLE ARRAY ;
DECLARE RLT_20  DOUBLE ARRAY ;
DECLARE RLT_21  DOUBLE ARRAY ;
DECLARE RLT_22  DOUBLE ARRAY ;
DECLARE RLT_23  DOUBLE ARRAY ;
DECLARE L1_XH VARCHAR(2) ARRAY;
DECLARE L1_ZHI DOUBLE ARRAY;
DECLARE L2_ZHI DOUBLE ARRAY;
DECLARE L2_YSXH VARCHAR(2) ARRAY;
DECLARE L1_YSXH VARCHAR(2) ARRAY := ARRAY('01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24');
--sql异常情况捕捉
DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
  MESSAGE := ::SQL_ERROR_MESSAGE || ::SQL_ERROR_CODE;
END;

CREATE LOCAL TEMPORARY COLUMN TABLE #LS_RESULT1 LIKE SINOPEC_YPXS.FYP_TJFX_PLLKFX1;
CREATE LOCAL TEMPORARY COLUMN TABLE #LS_RESULT2 LIKE SINOPEC_YPXS.FYP_TJFX_PLLKFX2;
CREATE LOCAL TEMPORARY COLUMN TABLE #L1_RESULT (XH VARCHAR(2),ZHI DOUBLE,YSXH VARCHAR(2) );
--定义RESULT临时表
IF :OPTI = '1'
--1代表柱线图
THEN
SQL_STR :='INSERT INTO #LS_RESULT1 SELECT A.' ||:SQLSEL||
' AS LMC,ROUND(A.S/B.Z*1000,3) AS PIZ,ROUND(A.J,2) AS XSJE FROM (SELECT ' ||:SQLSEL||
',COUNT(C) S,SUM(K) J FROM ( SELECT distinct (GZTYXSLSH),' ||:SQLSEL||
',COUNT(*) C,SUM("KZYSJE") K FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-fyp/Z1FX_XSSPLSFX"  WHERE '||:SQLWHERE||
'GROUP BY GZTYXSLSH,'||:SQLSEL||') GROUP BY '||:SQLSEL||
') A,(SELECT COUNT(*)  as Z  FROM (SELECT distinct (GZTYXSLSH),'||:SQLSEL||
' FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-fyp/Z1FX_XSSPLSFX"  WHERE '||:SQLWHERE||')  ) B';
--从流水XS47中读取所选类的PI值和销售金额  
EXEC :sql_str;
RESULT1 = SELECT * FROM #LS_RESULT1 order by xsje desc;
RESULT2 = SELECT * FROM #LS_RESULT2;
MESSAGE := '';
ELSEIF  :OPTI = '2'
--2代表分时段PI值表
THEN
SQL_STR := 'INSERT INTO #LS_RESULT2 select A.'||:SQLSEL||
' LMC  , ROUND(A.A00/B.Z*1000,3) PI0, ROUND(A.A01/B.Z*1000,3) PI1,' ||
'ROUND(A.A02/B.Z*1000,3) PI2,ROUND(A.A03/B.Z*1000,3) PI3,' ||
'ROUND(A.A04/B.Z*1000,3) PI4,ROUND(A.A05/B.Z*1000,3) PI5,' ||
'ROUND(A.A06/B.Z*1000,3) PI6,ROUND(A.A07/B.Z*1000,3) PI7,' ||
'ROUND(A.A08/B.Z*1000,3) PI8,ROUND(A.A09/B.Z*1000,3) PI9,' ||
'ROUND(A.A10/B.Z*1000,3) PI10,ROUND(A.A11/B.Z*1000,3) PI11,' ||
'ROUND(A.A12/B.Z*1000,3) PI12,ROUND(A.A13/B.Z*1000,3) PI13,' ||
'ROUND(A.A14/B.Z*1000,3) PI14,ROUND(A.A15/B.Z*1000,3) PI15,' ||
'ROUND(A.A16/B.Z*1000,3) PI16,ROUND(A.A17/B.Z*1000,3) PI17,' ||
'ROUND(A.A18/B.Z*1000,3) PI18,ROUND(A.A19/B.Z*1000,3) PI19,' ||
'ROUND(A.A20/B.Z*1000,3) PI20,ROUND(A.A21/B.Z*1000,3) PI21,' ||
'ROUND(A.A22/B.Z*1000,3) PI22,ROUND(A.A23/B.Z*1000,3) PI23' ||
' from (select '||:SQLSEL||' ,sum(a00)  A00,' ||
' sum(a01) A01,sum(a02) A02,sum(a03) A03,sum(a04) A04,' ||
' sum(a05) A05,sum(a06) A06,sum(a07) A07,sum(a08) A08,' ||
' sum(a09) A09,sum(a10) A10,sum(a11) A11,sum(a12) A12,' ||
' sum(a13) A13,sum(a14) A14,sum(a15) A15,sum(a16) A16,' ||
' sum(a17) A17,sum(a18) A18,sum(a19) A19,sum(a20) A20,' ||
' sum(a21) A21,sum(a22) A22,sum(a23) A23 FROM( SELECT distinct(GZTYXSLSH),'||:SQLSEL||
 ' ,sum((case when SUBSTR(TIME,1,2) = ''00'' then 1 end )) a00 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''01'' then 1 end )) a01 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''02'' then 1 end )) a02 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''03'' then 1 end )) a03 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''04'' then 1 end )) a04 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''05'' then 1 end )) a05 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''06'' then 1 end )) a06 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''07'' then 1 end )) a07 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''08'' then 1 end )) a08 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''09'' then 1 end )) a09 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''10'' then 1 end )) a10 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''11'' then 1 end )) a11 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''12'' then 1 end )) a12 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''13'' then 1 end )) a13 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''14'' then 1 end )) a14 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''15'' then 1 end )) a15 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''16'' then 1 end )) a16 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''17'' then 1 end )) a17 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''18'' then 1 end )) a18 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''19'' then 1 end )) a19 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''20'' then 1 end )) a20 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''21'' then 1 end )) a21 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''22'' then 1 end )) a22 ,' ||
'sum((case when SUBSTR(TIME,1,2) = ''23'' then 1 end )) a23 ' ||
' FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-fyp/Z1FX_XSSPLSFX" WHERE '||
:SQLWHERE||' group by GZTYXSLSH,'||:SQLSEL||
') GROUP BY '||:SQLSEL||' ) A ,(SELECT COUNT(*) Z FROM ( SELECT distinct GZTYXSLSH ,'||
:SQLSEL||' FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-fyp/Z1FX_XSSPLSFX" WHERE '||:SQLWHERE||' )) B';
--从流水XS47中读取所选类的分时段PI值，根据GZTYXSLSH非油统一销售交易流水号  来统计个数 
EXEC :sql_str;
RESULT1 = SELECT * FROM #LS_RESULT1;
l2_RESULT2 =  SELECT LMS,
(CASE  WHEN  "PI0" IS NULL THEN 0 ELSE  "PI0"  END) PI0,
(CASE  WHEN  "PI1" IS NULL THEN 0 ELSE  "PI1"  END) PI1 ,
(CASE  WHEN  "PI2" IS NULL THEN 0 ELSE  "PI2"  END) PI2,
(CASE  WHEN  "PI3" IS NULL THEN 0 ELSE  "PI3"  END)  PI3,
(CASE  WHEN  "PI4" IS NULL THEN 0 ELSE  "PI4"  END)  PI4,
(CASE  WHEN  "PI5" IS NULL THEN 0 ELSE  "PI5"  END)  PI5,
(CASE  WHEN  "PI6" IS NULL THEN 0 ELSE  "PI6"  END)  PI6,
(CASE  WHEN  "PI7"  IS NULL THEN 0 ELSE  "PI7"  END)  PI7,
(CASE  WHEN  "PI8" IS NULL THEN 0 ELSE  "PI8"  END)  PI8,
(CASE  WHEN  "PI9"  IS NULL THEN 0 ELSE  "PI9"  END)  PI9,
(CASE  WHEN  "PI10"  IS NULL THEN 0 ELSE  "PI10"  END)  PI10,
(CASE  WHEN  "PI11" IS NULL THEN 0 ELSE  "PI11"  END)  PI11,
(CASE  WHEN  "PI12" IS NULL THEN 0 ELSE  "PI12"  END)  PI12,
(CASE  WHEN  "PI13" IS NULL THEN 0 ELSE  "PI13"  END)  PI13,
(CASE  WHEN  "PI14" IS NULL THEN 0 ELSE  "PI14"  END)  PI14,
(CASE  WHEN  "PI15" IS NULL THEN 0 ELSE  "PI15"  END)  PI15,
(CASE  WHEN  "PI16" IS NULL THEN 0 ELSE  "PI16"  END)  PI16,
(CASE  WHEN  "PI17" IS NULL THEN 0 ELSE  "PI17"  END)  PI17,
(CASE  WHEN  "PI18" IS NULL THEN 0 ELSE  "PI18"  END)  PI18,
(CASE  WHEN  "PI19" IS NULL THEN 0 ELSE  "PI19"  END)  PI19,
(CASE  WHEN  "PI20" IS NULL THEN 0 ELSE  "PI20"  END)  PI20,
(CASE  WHEN  "PI21" IS NULL THEN 0 ELSE  "PI21"  END)  PI21,
(CASE  WHEN  "PI22" IS NULL THEN 0 ELSE  "PI22"  END)  PI22,
(CASE  WHEN  "PI23" IS NULL THEN 0 ELSE  "PI23"  END) PI23	
 FROM #LS_RESULT2;

   RLT_LMS := ARRAY_AGG(:L2_RESULT2.LMS); 
   RLT_0 := ARRAY_AGG(:l2_RESULT2.PI0);    
   RLT_1 := ARRAY_AGG(:l2_RESULT2.PI1); 
   RLT_2 := ARRAY_AGG(:l2_RESULT2.PI2);
   RLT_3 := ARRAY_AGG(:l2_RESULT2.PI3); 
   RLT_4 := ARRAY_AGG(:l2_RESULT2.PI4); 
   RLT_5 := ARRAY_AGG(:l2_RESULT2.PI5); 
   RLT_6 := ARRAY_AGG(:l2_RESULT2.PI6); 
   RLT_7 := ARRAY_AGG(:l2_RESULT2.PI7); 
   RLT_8 := ARRAY_AGG(:l2_RESULT2.PI8); 
   RLT_9 := ARRAY_AGG(:l2_RESULT2.PI9); 
   RLT_10 := ARRAY_AGG(:l2_RESULT2.PI10); 
   RLT_11 := ARRAY_AGG(:l2_RESULT2.PI11); 
   RLT_12 := ARRAY_AGG(:l2_RESULT2.PI12); 
   RLT_13 := ARRAY_AGG(:l2_RESULT2.PI13); 
   RLT_14 := ARRAY_AGG(:l2_RESULT2.PI14); 
   RLT_15 := ARRAY_AGG(:l2_RESULT2.PI15); 
   RLT_16 := ARRAY_AGG(:l2_RESULT2.PI16); 
   RLT_17 := ARRAY_AGG(:l2_RESULT2.PI17); 
   RLT_18 := ARRAY_AGG(:l2_RESULT2.PI18); 
   RLT_19 := ARRAY_AGG(:l2_RESULT2.PI19); 
   RLT_20 := ARRAY_AGG(:l2_RESULT2.PI20); 
   RLT_21 := ARRAY_AGG(:l2_RESULT2.PI21); 
   RLT_22 := ARRAY_AGG(:l2_RESULT2.PI22); 
   RLT_23 := ARRAY_AGG(:l2_RESULT2.PI23); 
TRUNCATE TABLE #LS_RESULT2; 
--RESULT2的所有列放入数组后，清空掉#LS_RESULT2表；

FOR L1_INDEX IN 1 .. CARDINALITY(:RLT_LMS) DO
--循环处理RESULT2的每条记录
insert into #l1_result values('01',:RLT_0[:l1_INDEX],'');
insert into #l1_result values('02',:RLT_1[:l1_INDEX],'');
insert into #l1_result values('03',:RLT_2[:l1_INDEX],'');
insert into #l1_result values('04',:RLT_3[:l1_INDEX],'');
insert into #l1_result values('05',:RLT_4[:l1_INDEX],'');
insert into #l1_result values('06',:RLT_5[:l1_INDEX],'');
insert into #l1_result values('07',:RLT_6[:l1_INDEX],'');
insert into #l1_result values('08',:RLT_7[:l1_INDEX],'');
insert into #l1_result values('09',:RLT_8[:l1_INDEX],'');
insert into #l1_result values('10',:RLT_9[:l1_INDEX],'');
insert into #l1_result values('11',:RLT_10[:l1_INDEX],'');
insert into #l1_result values('12',:RLT_11[:l1_INDEX],'');
insert into #l1_result values('13',:RLT_12[:l1_INDEX],'');
insert into #l1_result values('14',:RLT_13[:l1_INDEX],'');
insert into #l1_result values('15',:RLT_14[:l1_INDEX],'');
insert into #l1_result values('16',:RLT_15[:l1_INDEX],'');
insert into #l1_result values('17',:RLT_16[:l1_INDEX],'');
insert into #l1_result values('18',:RLT_17[:l1_INDEX],'');
insert into #l1_result values('19',:RLT_18[:l1_INDEX],'');
insert into #l1_result values('20',:RLT_19[:l1_INDEX],'');
insert into #l1_result values('21',:RLT_20[:l1_INDEX],'');
insert into #l1_result values('22',:RLT_21[:l1_INDEX],'');
insert into #l1_result values('23',:RLT_22[:l1_INDEX],'');
insert into #l1_result values('24',:RLT_23[:l1_INDEX],'');
L1_RESULT = SELECT XH,ZHI FROM #L1_RESULT  ORDER BY ZHI ASC;
--将每一条RESULT2的记录，转置到一个临时表#L1_RESULT中
 L1_XH := ARRAY_AGG(:L1_RESULT.XH); 
 L1_ZHI := ARRAY_AGG(:L1_RESULT.ZHI);
 LS_ARRT = 
 UNNEST(:L1_XH,:L1_ZHI,:L1_YSXH) AS ("XH","ZHI","YSXH");
 LS_T2 = SELECT YSXH,ZHI FROM :LS_ARRT ORDER BY XH ASC;
 
 L2_ZHI := ARRAY_AGG(:LS_T2.ZHI);
 L2_YSXH := ARRAY_AGG(:LS_T2.YSXH); 

 insert into #ls_result2 values(
 --重新插入值
 :RLT_LMS[:l1_INDEX],:L2_ZHI[1],:L2_ZHI[2]	,:L2_ZHI[3]	,:L2_ZHI[4]	,:L2_ZHI[5]	,
:L2_ZHI[6]	,:L2_ZHI[7]	,:L2_ZHI[8]	,:L2_ZHI[9]	,:L2_ZHI[10]	,:L2_ZHI[11]	,
:L2_ZHI[12]	,:L2_ZHI[13]	,:L2_ZHI[14]	,:L2_ZHI[15]	,:L2_ZHI[16]	,
:L2_ZHI[17]	,:L2_ZHI[18]	,:L2_ZHI[19]	,:L2_ZHI[20]	,:L2_ZHI[21]	,:L2_ZHI[22]	,
:L2_ZHI[23],:L2_ZHI[24]		);
insert into #ls_result2 values(
--生成时段序号
 :RLT_LMS[:l1_INDEX],:L2_YSXH[1]	,:L2_YSXH[2]	,:L2_YSXH[3]	,:L2_YSXH[4]	,:L2_YSXH[5]	,
:L2_YSXH[6]	,:L2_YSXH[7]	,:L2_YSXH[8]	,:L2_YSXH[9]	,:L2_YSXH[10]	,:L2_YSXH[11]	,:L2_YSXH[12]	,
:L2_YSXH[13]	,:L2_YSXH[14]	,:L2_YSXH[15]	,:L2_YSXH[16]	,:L2_YSXH[17]	,:L2_YSXH[18]	,
:L2_YSXH[19]	,:L2_YSXH[20]	,:L2_YSXH[21]	,:L2_YSXH[22]	,:L2_YSXH[23],:L2_YSXH[24] );

TRUNCATE TABLE #L1_RESULT; 
END FOR;

--xx := :xy;
RESULT2 = SELECT * FROM #LS_RESULT2 ;

MESSAGE := '';
ELSE
RESULT1 = SELECT * FROM #LS_RESULT1;
RESULT2 = SELECT * FROM #LS_RESULT2;
MESSAGE := '没有数据';
END IF; 
DROP TABLE #LS_RESULT1;
DROP TABLE #LS_RESULT2;
DROP TABLE #L1_RESULT;
END;
