CREATE PROCEDURE sinopec_ypxs.ZFYP_SET_KMEANS(
/**
--author Geng Tian
--2014.8.7
--Cluster method for non-oil goods,method is kmeans
**/
IN USER_ID VARCHAR(50),--用户ID

IN GROUP_NUMBER INT,
IN CATEGORY_WEIGHTS DOUBLE,
IN MAX_ITERATION INT,
IN EXIT_THRESHOLD Double,
IN DISTANCE_LEVEL INT,
IN MINKOWSKI_POWER Double,

OUT MESSAGE varchar(15), --消息
OUT RESULT sinopec_ypxs.ZFYP_SET_KMEANS_ASSIGN_T --聚类分配表
)
LANGUAGE SQLSCRIPT 
AS
BEGIN
DECLARE TX_COUNT BIGINT ;--特性数量
DECLARE ZB_COUNT BIGINT ;--指标数量
DECLARE SH_COUNT BIGINT;--总数量
DECLARE TX_ROW VARCHAR(600);--特性一行
DECLARE ZB_ROW VARCHAR(600);--指标一行
DECLARE SQL_STR CLOB;--sql拼接
DECLARE SQL_STR_CICLE CLOB;--sql拼接
DECLARE SQL_STR_KMEANS_DATA CLOB;--sql拼接
DECLARE SQL_STR_KMEANS_CENTERS CLOB;--sql拼接
declare i int :=0;
declare j int :=0;
declare k int :=0;
declare n int :=0;
declare m int :=0;
declare x int :=1;
declare y int :=1;
declare z int :=0;
declare u int :=0;
declare v int :=0;


MESSAGE :='fail';

----得到特性数量
SELECT COUNT("PORPERTY") INTO TX_COUNT FROM sinopec_ypxs.KMEANS_LIST_TEMP WHERE "PORPERTY"='TX' and "ID"=:USER_ID;
----得到指标数量
SELECT COUNT("PORPERTY") INTO ZB_COUNT FROM sinopec_ypxs.KMEANS_LIST_TEMP WHERE "PORPERTY"='ZB' and "ID"=:USER_ID;
SH_COUNT := :TX_COUNT+ :ZB_COUNT;

----获取特性表
CREATE LOCAL TEMPORARY COLUMN TABLE #TX_TEMP_TABLE("COUNT" INT,"NAME" VARCHAR(60),"SQLSTR" VARCHAR(600));
INSERT INTO #TX_TEMP_TABLE(SELECT "COUNT","NAME","SQL" FROM sinopec_ypxs.KMEANS_LIST_TEMP WHERE "PORPERTY"='TX' and "ID"=:USER_ID);--等于特性
----获取指标表
CREATE LOCAL TEMPORARY COLUMN TABLE #ZB_TEMP_TABLE("COUNT" INT,"NAME" VARCHAR(60),"SQLSTR" VARCHAR(600));
INSERT INTO #ZB_TEMP_TABLE(SELECT "COUNT","NAME","SQL" FROM sinopec_ypxs.KMEANS_LIST_TEMP WHERE "PORPERTY"='ZB' and "ID"=:USER_ID);--等于指标

SQL_STR_KMEANS_DATA :='CREATE TYPE SINOPEC_YPXS.ZFYP_SET_KMEANS_DATA_T'||:USER_ID||' AS TABLE("ID" varchar(60)';--拼SQL字符串
SQL_STR_KMEANS_CENTERS :='CREATE TYPE SINOPEC_YPXS.ZFYP_SET_KMEANS_CENTERS_T'||:USER_ID||' AS TABLE("CENTER_ID" INTEGER';--拼SQL字符串串

while :i<:TX_COUNT--循环特性
do
SELECT "NAME" INTO TX_ROW FROM #TX_TEMP_TABLE WHERE "COUNT"= :i;
SQL_STR_KMEANS_DATA :=:SQL_STR_KMEANS_DATA||','||'"'||:TX_ROW||'"'||' VARCHAR(60)';--拼SQL字符串
SQL_STR_KMEANS_CENTERS :=:SQL_STR_KMEANS_CENTERS||','||'"'||:TX_ROW||'"'||' VARCHAR(60)';--拼SQL字符串
i := :i + 1;
end while;
while :j<:ZB_COUNT--循环指标
do
SELECT "NAME" INTO ZB_ROW FROM #ZB_TEMP_TABLE WHERE "COUNT"= :j;
SQL_STR_KMEANS_DATA :=:SQL_STR_KMEANS_DATA||','||'"'||:ZB_ROW||'"'||' DOUBLE';--拼SQL字符串
SQL_STR_KMEANS_CENTERS :=:SQL_STR_KMEANS_CENTERS||','||'"'||:ZB_ROW||'"'||' DOUBLE';--拼SQL字符串
j := :j + 1;
end while;
SQL_STR_KMEANS_DATA := :SQL_STR_KMEANS_DATA||')';
SQL_STR_KMEANS_CENTERS := :SQL_STR_KMEANS_CENTERS||')';
EXEC SQL_STR_KMEANS_DATA;
EXEC SQL_STR_KMEANS_CENTERS;

SQL_STR_CICLE :='drop table SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL';
EXEC SQL_STR_CICLE;
CREATE COLUMN TABLE SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL( "ID" INTEGER, "TYPENAME" VARCHAR(100), "DIRECTION" VARCHAR(100));--创建算法表
INSERT INTO SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL VALUES (1, 'SINOPEC_YPXS.ZFYP_SET_KMEANS_DATA_T'||:USER_ID, 'in');
INSERT INTO SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL VALUES (2, 'SINOPEC_YPXS.ZFYP_SET_KMEANS_CONTROL_T', 'in');
INSERT INTO SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL VALUES (3, 'SINOPEC_YPXS.ZFYP_SET_KMEANS_ASSIGN_T', 'out');
INSERT INTO SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL VALUES (4, 'SINOPEC_YPXS.ZFYP_SET_KMEANS_CENTERS_T'||:USER_ID, 'out'); 

SQL_STR_CICLE :='CALL SYSTEM.afl_wrapper_eraser(''FYP_SPGLFX_KMEANS'||:USER_ID||''')';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='CALL SYSTEM.afl_wrapper_generator(''FYP_SPGLFX_KMEANS'||:USER_ID||''', ''AFLPAL'', ''KMEANS'', SINOPEC_YPXS.ZFYP_SET_KMEANS_PDATA_TBL)';
EXEC SQL_STR_CICLE;

CREATE LOCAL TEMPORARY COLUMN TABLE #TEMP_KMEANS_CONTROL_TBL("NAME" VARCHAR(50),"INT_ARGS" INTEGER,"DOUBLE_ARGS" DOUBLE,"STRING_ARGS" VARCHAR (100));--创建算法参数表
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('THREAD_NUMBER',15, null, null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('GROUP_NUMBER',:GROUP_NUMBER, null, null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('INIT_TYPE',1,null,null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('DISTANCE_LEVEL',:DISTANCE_LEVEL,null,null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('MAX_ITERATION',:MAX_ITERATION,null,null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('EXIT_THRESHOLD',null,:EXIT_THRESHOLD,null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('NORMALIZATION',0,null,null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('CATEGORY_WEIGHTS',null,:CATEGORY_WEIGHTS, null);
INSERT INTO #TEMP_KMEANS_CONTROL_TBL VALUES ('MINKOWSKI_POWER',null,:MINKOWSKI_POWER,null);

----创建kmeans输入数据表
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #TEMP_KMEANS_DATA_TBL LIKE SINOPEC_YPXS.ZFYP_SET_KMEANS_DATA_T'||:USER_ID;
EXEC SQL_STR_CICLE;

--根据用户选择情况得到数据表
while :n<:TX_COUNT--循环特性
do
SELECT "SQLSTR" INTO TX_ROW FROM #TX_TEMP_TABLE WHERE "COUNT"=:n;
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #SH_TEMP_TABLE'||:n||'(SQL_ID varchar(32),SH varchar(60))';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='INSERT INTO #SH_TEMP_TABLE'||:n||'('||:TX_ROW||')';
EXEC SQL_STR_CICLE;
n := :n + 1;
end while;
while :m<:ZB_COUNT--循环指标
do
k := :m +:TX_COUNT;
SELECT "SQLSTR" INTO ZB_ROW FROM #ZB_TEMP_TABLE WHERE "COUNT"= :m;
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #SH_TEMP_TABLE'||:k||'(SQL_ID varchar(32),SH double)';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='INSERT INTO #SH_TEMP_TABLE'||:k||'('||:ZB_ROW||')';
EXEC SQL_STR_CICLE;
m := :m + 1;
end while;

--将数据表插入kmeans数据表
SQL_STR :='insert into #TEMP_KMEANS_DATA_TBL(select #SH_TEMP_TABLE0.SQL_ID,#SH_TEMP_TABLE0.SH';
while :x< :SH_COUNT
do
SQL_STR := :SQL_STR||','||'#SH_TEMP_TABLE'||:x||'.SH';
x := :x + 1;
end while;
SQL_STR := :SQL_STR||' from #SH_TEMP_TABLE0';
while :y< :SH_COUNT
do
SQL_STR := :SQL_STR||' full outer join #SH_TEMP_TABLE'||:y||' on #SH_TEMP_TABLE0.SQL_ID=#SH_TEMP_TABLE'||:y||'.SQL_ID';
y := :y + 1;
end while;
SQL_STR := :SQL_STR||')';
EXEC SQL_STR;

--去掉kmeans数据表中为空的值
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #TEMP_KMEANS_DATA_TBL_NOT_NULL LIKE SINOPEC_YPXS.ZFYP_SET_KMEANS_DATA_T'||:USER_ID;
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='insert into #TEMP_KMEANS_DATA_TBL_NOT_NULL(select "ID"';
while :u< :TX_COUNT
do
SELECT "NAME" INTO TX_ROW FROM #TX_TEMP_TABLE WHERE "COUNT"= :u;
SQL_STR_CICLE := :SQL_STR_CICLE||','||'case when "'||:TX_ROW||'" is null then ''0'' else "'||:TX_ROW||'" end';
u := :u + 1;
end while;
while :v< :ZB_COUNT
do
SELECT "NAME" INTO ZB_ROW FROM #ZB_TEMP_TABLE WHERE "COUNT"= :v;
SQL_STR_CICLE := :SQL_STR_CICLE||','||'case when "'||:ZB_ROW||'" is null then ''0'' else "'||:ZB_ROW||'" end';
v := :v + 1;
end while;
SQL_STR_CICLE := :SQL_STR_CICLE||' from #TEMP_KMEANS_DATA_TBL)';
EXEC SQL_STR_CICLE;

----生成聚类分配表和kmeans结果中心表的临时表
CREATE LOCAL TEMPORARY COLUMN TABLE #TEMP_KMEANS_ASSIGN_TBL LIKE SINOPEC_YPXS.ZFYP_SET_KMEANS_ASSIGN_T; 
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #TEMP_KMEANS_CENTERS_TBL LIKE SINOPEC_YPXS.ZFYP_SET_KMEANS_CENTERS_T'||:USER_ID;
EXEC SQL_STR_CICLE;

----执行算法
SQL_STR_CICLE :='CALL _SYS_AFL.FYP_SPGLFX_KMEANS'||:USER_ID||'(#TEMP_KMEANS_DATA_TBL_NOT_NULL, #TEMP_KMEANS_CONTROL_TBL, #TEMP_KMEANS_ASSIGN_TBL, #TEMP_KMEANS_CENTERS_TBL) with OVERVIEW';
EXEC SQL_STR_CICLE;

----将结果赋给输出表
MESSAGE :='sucessful';
RESULT = SELECT * FROM #TEMP_KMEANS_ASSIGN_TBL;
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #ZFYP_SET_KMEANS_CENTERS'||:USER_ID||' like SINOPEC_YPXS.ZFYP_SET_KMEANS_CENTERS_T'||:USER_ID;
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='insert into #ZFYP_SET_KMEANS_CENTERS'||:USER_ID||'(SELECT * FROM #TEMP_KMEANS_CENTERS_TBL)';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='CREATE LOCAL TEMPORARY COLUMN TABLE #ZFYP_SET_KMEANS_ASSIGN_T'||:USER_ID||' like SINOPEC_YPXS.ZFYP_SET_KMEANS_ASSIGN_T';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='INSERT INTO #ZFYP_SET_KMEANS_ASSIGN_T'||:USER_ID||'(SELECT * FROM #TEMP_KMEANS_ASSIGN_TBL)';
EXEC SQL_STR_CICLE;

----删除所有临时表
drop table #TX_TEMP_TABLE;
drop table #ZB_TEMP_TABLE;
drop table #TEMP_KMEANS_ASSIGN_TBL;
drop table #TEMP_KMEANS_CONTROL_TBL;
SQL_STR_CICLE :='drop table #TEMP_KMEANS_DATA_TBL';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='drop table #TEMP_KMEANS_CENTERS_TBL';
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='drop table #TEMP_KMEANS_DATA_TBL_NOT_NULL';
EXEC SQL_STR_CICLE;
while :z< :SH_COUNT
do
SQL_STR_CICLE :='drop table #SH_TEMP_TABLE'||:z;
EXEC SQL_STR_CICLE;
z := :z + 1;
end while;
SQL_STR_CICLE :='drop type SINOPEC_YPXS.ZFYP_SET_KMEANS_DATA_T'||:USER_ID;
EXEC SQL_STR_CICLE;
SQL_STR_CICLE :='drop type SINOPEC_YPXS.ZFYP_SET_KMEANS_CENTERS_T'||:USER_ID;
EXEC SQL_STR_CICLE; 

SQL_STR_CICLE :='CALL SYSTEM.afl_wrapper_eraser(''FYP_SPGLFX_KMEANS'||:USER_ID||''')';
EXEC SQL_STR_CICLE;

END;
