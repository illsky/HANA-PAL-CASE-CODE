CREATE PROCEDURE sinopec_ypxs.ZKHFX_SET_KHFQ(
IN SQLWHERE CLOB, --SQL的条件语句
IN SQLSELECT VARCHAR(2000), --用户所选的指标
IN HYKSD INTEGER, --活跃开始天数
IN HYJSD INTEGER, --活跃结束天数
IN WJYD INTEGER, --无交易天数
IN OPTI1 VARCHAR(1), --客户过滤选择
IN OPTI2 VARCHAR(1), --查询OR挖掘选择
IN MIN_RECORDS_OF_PARENT INTEGER, --父节点最小记录（决策树）
IN MIN_RECORDS_OF_LEAF INTEGER ,--叶节点最小记录（决策树）
IN GROUP_NUMBER INTEGER , --聚类的个数（聚类）
OUT TABNAME1 NVARCHAR(15),
OUT TABNAME2 NVARCHAR(15),
OUT TABNAME2_DETAIL NVARCHAR(15),
OUT C45_PMML SINOPEC_YPXS.PAL_C45_PMML,
--OUT OUT_STR STRING,
OUT ERROR NVARCHAR(150)
)
LANGUAGE SQLSCRIPT 
AS
BEGIN
/*
修改记录：
--20150414 PHQZHAO 创建客户分群存储过程；
--20150422 PHQZHAO 取消JSON格式的输出，并清除PMML格式中的括号；
--20150514 PHQZHAO 由于模型Z1FX_JYMX_HYJYMX 删除字段GZJYKH，改为GZJYKKHLA，特此调整；
--20150519 PHQZHAO TABNAME2输出结果表，改为根据聚类选择字段动态生成；
--20150626 PHQZHAO 过滤掉了非法身份证数据；
--20150630 PHQZHAO 增加了客户描述的输出；

功能描述：
  从数据源“会员交易明细”Z1FX_JYMX_HYJYMX，“IC卡交易明细”Z1FX_XSE4_ICJYMX，根据输入参数，
结合“统一客户编码”Z1ZBZSA5表，得到“客户编号（统一）”，再从“客户分析 客户最新信息” Z1ZB_KHFX_ZXXX
中获取挖掘基础数据，根据KMEANS和C4.5挖掘算法得到最终分析结果。

选项说明：
 OPTI1:1使用活跃天数，2使用无交易天数；
 OPTI2:1查询结果，2执行分析；
*/
DECLARE SQL_STR1 CLOB;
DECLARE SQL_STR2 CLOB;
DECLARE SQL_STR3 CLOB;
DECLARE SQL_STR4 CLOB;
DECLARE SQL_STR5 CLOB;
DECLARE SQL_STR6 CLOB;
DECLARE SQL_STR7 CLOB;
DECLARE SQL_STR8 CLOB;
DECLARE SQL_STR9 CLOB;
DECLARE MYCOND1 CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE TAB_FLAG INTEGER := 0;
DECLARE TAB_COUNT1 INTEGER := 0;
DECLARE TAB_COUNT2 INTEGER := 0;
DECLARE RAND_OUT1 NVARCHAR(15);
DECLARE RAND_OUT2 NVARCHAR(15);
DECLARE RAND_OUT3 NVARCHAR(15);
DECLARE LS_TMODEL1 CLOB;
DECLARE LS_TMODEL2 CLOB;
declare ARRAY_TMODEL clob ARRAY;
declare ARRAY_ID INTEGER ARRAY;
declare V_INDEX INTEGER;
--sql异常情况捕捉
DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
DROP TABLE #LS_GZKHBH1;
DROP TABLE #LS_GZKHBH2;
--DROP TABLE #KHFQ_CONTROL_TBL_KMEANS;
  ERROR := ::SQL_ERROR_MESSAGE || ::SQL_ERROR_CODE;
END;
--创建结果表的随机数临时表名
select '#T'||SUBSTRING(RAND(),8,10) into rand_out1 from dummy;
select '#T'||SUBSTRING(RAND(),8,10) into rand_out2 from dummy;
select :rand_out2||'_MX' into rand_out3 from dummy;
--获取全口径基础数据以及数据中的客户编码
----创建接收统一客户编号的表
CREATE LOCAL TEMPORARY  TABLE #LS_GZKHBH1 ( "GZKHBH" NVARCHAR (22));
CREATE LOCAL TEMPORARY  TABLE #LS_GZKHBH2 ( "GZKHBH" NVARCHAR (22));
----将业务数据(非油/油品)满足条件的统一客户编号找出插入上表
--LS_DS1 = APPLY_FILTER("_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1FX_XSE4_ICJYMX",:SQLWHERE);
--LS_DS2 = APPLY_FILTER("_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1FX_JYMX_HYJYMX",:SQLWHERE);

SQL_STR1 := ' INSERT INTO  #LS_GZKHBH1 ( SELECT DISTINCT A.GZKHBH GZKHBH FROM ( '||
' SELECT DISTINCT gzjykkhla,gzkhbh FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1SX_KHBHDZ"  '||
--20150626 PHQZHAO 下面这句过滤掉了非法身份证数据；
' WHERE ( GZJYKLZLX <> ''1'' OR GZSFZYZ <> ''N'') AND GZTYZJH <> ''000111111111111111'') A INNER JOIN  '||
' ( SELECT DISTINCT gzjykkhla FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1FX_XSE4_ICJYMX" WHERE '|| :SQLWHERE ||
'   ) B ON A.GZJYKKHLA = B.GZJYKKHLA union SELECT DISTINCT A.GZKHBH GZKHBH  FROM ( '||
' SELECT DISTINCT GZJYKKHLA,GZKHBH FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1SX_KHBHDZ"  '||
--20150626 PHQZHAO 下面这句过滤掉了非法身份证数据；
' WHERE ( GZJYKLZLX <> ''1'' OR GZSFZYZ <> ''N'') AND GZTYZJH <> ''000111111111111111'') A INNER JOIN ' ||
' (SELECT DISTINCT GZJYKKHLA FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1FX_JYMX_HYJYMX" WHERE '|| :SQLWHERE ||
' ) B ON A.GZJYKKHLA = B.GZJYKKHLA  ) ';


EXEC :SQL_STR1;
--临时增加
--select *  from #LS_GZKHBH1;
--判断是否取到了数据，没取到就跳出
select max(1) into TAB_FLAG from dummy where not exists 
(select *  from #LS_GZKHBH1 );
if TAB_FLAG = 1 then 
--DROP TABLE #LS_GZKHBH1;
signal mycond1 set message_text = '未找到满足条件的客户信息1';
end if;
TAB_FLAG := 0 ;

----客户过滤选择
IF :OPTI1 = '1' THEN --使用活跃天数:最后的非油、油品消费以及最后充值日期天数在范围内；
 INSERT INTO  #LS_GZKHBH2 
 select DISTINCT A.GZKHBH GZKHBH from  SAPSR3.Z1ZB_KHFX_ZXXX A INNER JOIN  #LS_GZKHBH1 B
 ON A.GZKHBH = B.GZKHBH
 where ( 
 (A.ZZHFYGMTS >= :hyksd and A.ZZHFYGMTS <= :hyjsd ) or 
 ( A.ZZHGYTS >= :hyksd and A.ZZHGYTS <= :hyjsd ) or 
 (A.ZZJCZTS >= :hyksd and A.ZZJCZTS <= :hyjsd )
 ) AND ( A.ZZHFYGMTS <> -1 OR A.ZZHGYTS <> -1 OR A.ZZJCZTS <> -1 );

ELSEIF :OPTI1 = '2' THEN --使用无交易天数：最后的非油、油品消费大于天数的；

 INSERT INTO  #LS_GZKHBH2 
 select DISTINCT A.GZKHBH GZKHBH from  SAPSR3.Z1ZB_KHFX_ZXXX  A INNER JOIN  #LS_GZKHBH1 B
  ON A.GZKHBH = B.GZKHBH
 where 
--暂时注释掉 ZZHFYGMTS 最近非油品购买天数 ，待非油模型Z1ZBJYMX和主数据模型Z1ZBZSA5的关联关系确认后再加 20150514
 --A.ZZHFYGMTS >= :wjyd  and 
 A.ZZHGYTS >= :wjyd  ;
END IF;
--临时增加
--select *  from #LS_GZKHBH2;
--判断是否取到了数据，没取到就跳出
select max(1) into TAB_FLAG from dummy where not exists 
(select *  from #LS_GZKHBH2 );
if TAB_FLAG = 1 then 
--DROP TABLE #LS_GZKHBH2;
signal mycond1 set message_text = '未找到满足条件的客户信息2';
end if;
TAB_FLAG := 0 ;

----当点"查询结果"按钮时
IF :OPTI2 = '1' THEN
SQL_STR2 := 'CREATE  LOCAL TEMPORARY TABLE '|| :RAND_OUT1 ||' LIKE sinopec_ypxs.KHFX_KHFQ_JGCX';
 EXEC SQL_STR2;
--加油卡数量 --最近消费非油日期--最后一次购油日期到统计日天数-加油卡最近充值日期离统计日期的天数
--月均汽油+月均柴油数量--月均非油消费金额
SQL_STR3 := 'INSERT INTO '||:RAND_OUT1||
/*
 ' SELECT GZKHBH, ZAGE,G0XINGBIE, ZJYKSL,'||
'( CASE WHEN ZZHFYGMTS = -1 THEN ''00000000''  ELSE to_date(add_days(to_date(AEDAT,''YYYYMMDD''),-1*ZZHFYGMTS),''YYYY-MM-DD'') END )ZJXFFYRQ, '||
'( CASE WHEN ZZHGYTS = -1 THEN ''00000000''  ELSE   to_date(add_days(to_date(AEDAT,''YYYYMMDD''),-1*ZZHGYTS),''YYYY-MM-DD'') END ) ZJJYRQ, '||
'( CASE WHEN ZZJCZTS = -1 THEN ''00000000''  ELSE  to_date(add_days(to_date(AEDAT,''YYYYMMDD''),-1*ZZJCZTS), ''YYYY-MM-DD'')  END )ZJCZRQ, '||
 ' (ZYJQYSL+ZYJCYSL) YJJYSL,  ZFYYJJE FROM SAPSR3.Z1ZB_KHFX_ZXXX WHERE GZKHBH IN (SELECT GZKHBH FROM #LS_GZKHBH2) ';
*/
' SELECT A.GZKHBH, B.GZJYKGEMC,A.ZAGE,A.G0XINGBIE, A.ZJYKSL, '||
'( CASE WHEN A.ZZHFYGMTS = -1 THEN ''00000000''  ELSE to_date(add_days(to_date(A.AEDAT,''YYYYMMDD''),-1*A.ZZHFYGMTS),''YYYY-MM-DD'') END )ZJXFFYRQ, '||
'( CASE WHEN A.ZZHGYTS = -1 THEN ''00000000''  ELSE   to_date(add_days(to_date(A.AEDAT,''YYYYMMDD''),-1*A.ZZHGYTS),''YYYY-MM-DD'') END ) ZJJYRQ, '||
'( CASE WHEN A.ZZJCZTS = -1 THEN ''00000000''  ELSE  to_date(add_days(to_date(A.AEDAT,''YYYYMMDD''),-1*A.ZZJCZTS), ''YYYY-MM-DD'')  END )ZJCZRQ, '||
'(A.ZYJQYSL+A.ZYJCYSL) YJJYSL,  A.ZFYYJJE FROM SAPSR3.Z1ZB_KHFX_ZXXX  A LEFT JOIN '||
'(SELECT DISTINCT GZKHBH, GZJYKGEMC FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1SX_KHBHDZ"  ) B '||
'ON A.GZKHBH = B.GZKHBH WHERE A.GZKHBH IN (SELECT GZKHBH FROM #LS_GZKHBH2) AND B.GZKHBH IN (SELECT GZKHBH FROM #LS_GZKHBH2)';

EXEC SQL_STR3;
TABNAME1 := :RAND_OUT1;
----当点"执行分析"按钮时
ELSEIF :OPTI2 = '2' THEN
--判断参数输入的合法性
select count(*) into  TAB_COUNT1  from #LS_GZKHBH2;
IF :GROUP_NUMBER >= :TAB_COUNT1 THEN
signal mycond1 set message_text = '"聚类个数"参数值不能大于等于样本数'||:TAB_COUNT1||'。';
END IF;
CREATE LOCAL TEMPORARY COLUMN TABLE #KHFQ_CONTROL_TBL_KMEANS(
    "NAME" VARCHAR (100), 
    "INTARGS" INTEGER, 
    "DOUBLEARGS" DOUBLE, 
    "STRINGARGS" VARCHAR (100)
);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('THREAD_NUMBER', 2, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('GROUP_NUMBER', :GROUP_NUMBER, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('INIT_TYPE', 1, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('DISTANCE_LEVEL',2, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('MAX_ITERATION', 100, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('EXIT_THRESHOLD', null, 1.0E-6, null);
INSERT INTO #KHFQ_CONTROL_TBL_KMEANS VALUES ('CATEGORY_WEIGHTS', null, 0.5, null);

CREATE LOCAL TEMPORARY COLUMN TABLE #KHFX_KMEANS_DATA_TBL LIKE SINOPEC_YPXS.KHFX_KMEANS_DATA_T_KHFQ;
SQL_STR4 :=
'INSERT INTO  #KHFX_KMEANS_DATA_TBL(ID,'||:SQLSELECT|| ') SELECT GZKHBH ID,'||
:SQLSELECT||' FROM SAPSR3.Z1ZB_KHFX_ZXXX WHERE GZKHBH IN (SELECT GZKHBH FROM #LS_GZKHBH2) ';
EXEC SQL_STR4;
CREATE LOCAL TEMPORARY COLUMN TABLE #PAL_KMEANS_ASSIGNED_TBL LIKE SINOPEC_YPXS.KHFX_KMEANS_CASSIGN_T_KHFQ;
CREATE LOCAL TEMPORARY COLUMN TABLE #PAL_KMEANS_CENTERS_TBL LIKE SINOPEC_YPXS.KHFX_KMEANS_CENTERS_T_KHFQ;
--调用KMEANS存储过程,得到结果表#PAL_KMEANS_ASSIGNED_TBL
--临时增加
--SELECT ID,ZZGCZJE,ZDCZGJY,ZYJJYCS,ZYJQYSL,ZQYZL,ZPJDCJYSL FROM #KHFX_KMEANS_DATA_TBL;
KHFX_KMEANS_DATA_TBL = SELECT * FROM #KHFX_KMEANS_DATA_TBL;
KHFQ_CONTROL_TBL_KMEANS  =  SELECT * FROM #KHFQ_CONTROL_TBL_KMEANS;
PAL_KMEANS_ASSIGNED_TBL =   SELECT * FROM #PAL_KMEANS_ASSIGNED_TBL;
PAL_KMEANS_CENTERS_TBL  =  SELECT * FROM #PAL_KMEANS_CENTERS_TBL;
CALL "SINOPEC_YPXS".ZKHFX_PAL_KMEANS_KHFQ
(:KHFX_KMEANS_DATA_TBL, :KHFQ_CONTROL_TBL_KMEANS, :PAL_KMEANS_ASSIGNED_TBL,  :PAL_KMEANS_CENTERS_TBL) with OVERVIEW;
--结果回填CENTER表/ASSIGN表：
--临时增加
--select * from :PAL_KMEANS_CENTERS_TBL;
insert into #PAL_KMEANS_CENTERS_TBL 
select * from :PAL_KMEANS_CENTERS_TBL;
insert into #PAL_KMEANS_ASSIGNED_TBL
select * from :PAL_KMEANS_ASSIGNED_TBL;
--填充聚类输出结果表，根据聚类选择的字段 动态生成表
--SQL_STR5 := 'CREATE  LOCAL TEMPORARY TABLE '|| :RAND_OUT2 ||' LIKE sinopec_ypxs.KHFX_KHFQ_JLSCB';
SQL_STR5 := 'CREATE  LOCAL TEMPORARY TABLE '|| :RAND_OUT2 ||' AS ( SELECT CLUSTER_ID,'||:SQLSELECT ||' FROM #PAL_KMEANS_CENTERS_TBL )';
 EXEC SQL_STR5;
 
 SQL_STR7 := 'CREATE  LOCAL TEMPORARY TABLE '||:rand_out3 ||' LIKE sinopec_ypxs.KHFX_KHFQ_JLMXSCB';
 EXEC SQL_STR7;
  SQL_STR8 := 'insert into '|| :RAND_OUT3 ||
' SELECT A.CENTER_ASSIGN ,B.GZKHBH,C.GZJYKGEMC,B.GZTYZJH,B.ZAGE,B.G0XINGBIE,'||
' B.ZSHOURU,B.ZDIYU,B.ZZZBKSJ,B.ZCLPP,B.ZCLXH,B.ZCLGMSJ,B.ZCZZY,B.ZCLSL,'||
' B.ZJYKSL,B.ZJYKLB,B.ZZJCZTS,B.ZZQCZCS,B.ZMDCZCS,B.ZWZCZCS,B.ZQTCZCS,B.ZZGCZJE,'||
' B.ZPJCZJE,B.ZRJYE,B.ZYJCZCS,B.ZYKGMFYCS,B.ZZHGYTS,B.ZQYBHS,B.ZCYBHS,B.ZDCZGJY,'||
' B.ZDCZDJY,B.ZYJJYCS,B.ZYJQYSL,B.ZYJCYSL,B.ZYJQYJE,B.ZYJCYJE,B.ZRJQYSL,B.ZRJCYSL,'||
' B.ZRJQYJE,B.ZRJCYJE,B.ZGBHQYBL,B.ZDBHQYBL,B.ZJYJE,B.ZJYLX,B.ZCPLX,B.ZQYZL,'||
' B.ZCYZL,B.ZJYCS,B.ZFYSL,B.ZPJDCJYSL,B.ZPJDCJYJE,B.ZFYPJDBSL,B.ZFYPJDBJE,B.ZZHFYGMTS,'||
' B.ZFYPJJE,B.ZFYYJCS,B.ZFYYJJE,B.ZFYZGSPS,B.ZRJGXE,B.ZYJWZDLCS,B.ZZGDLTS,B.ZSFAPPDL,'||
' B.ZSFBDWX,B.ZTSCS,B.ZZHKFTHTS,B.AEDAT FROM #PAL_KMEANS_ASSIGNED_TBL A JOIN SAPSR3.Z1ZB_KHFX_ZXXX B'||
' ON A.ID = B.GZKHBH INNER JOIN (SELECT DISTINCT GZKHBH, GZJYKGEMC FROM "_SYS_BIC"."sinopec.zbyy.xsyy.z1-khfx/Z1SX_KHBHDZ" '||
' WHERE GZKHBH IN (SELECT GZKHBH FROM #LS_GZKHBH2) ) C  ON A.ID = C.GZKHBH  ';
 exec sql_str8;
--将聚类结果整理为C45的输入格式
CREATE LOCAL TEMPORARY COLUMN TABLE #KHFX_KMEANS_RESULT_C45 LIKE "SINOPEC_YPXS"."KHFX_KMEANS_RESULT_FOR_C45";
INSERT INTO #KHFX_KMEANS_RESULT_C45
/*
SELECT round(A.ZAGE,2) ZAGE ,A.G0XINGBIE G0XINGBIE,
round(A.ZSHOURU,2) ZSHOURU,	round(A.ZDIYU,2) ZDIYU,	round(A.ZZZBKSJ,2) ZZZBKSJ,	round(A.ZCLPP,2) ZCLPP,
round(A.ZCLXH,2) ZCLXH,	round(A.ZCLGMSJ,2) ZCLGMSJ,	A.ZCZZY ZCZZY,	A.ZCLSL ZCLSL,	A.ZJYKSL ZJYKSL,	A.ZJYKLB ZJYKLB,	
round(A.ZZJCZTS,2) ZZJCZTS,	round(A.ZZQCZCS,2) ZZQCZCS,	A.ZMDCZCS ZMDCZCS,	A.ZWZCZCS ZWZCZCS,	A.ZQTCZCS ZQTCZCS,	A.ZZGCZJE ZZGCZJE,
round(A.ZPJCZJE,2) ZPJCZJE,	round(A.ZRJYE,2) ZRJYE,	A.ZYJCZCS ZYJCZCS,	A.ZYKGMFYCS ZYKGMFYCS,	A.ZZHGYTS ZZHGYTS,	A.ZQYBHS ZQYBHS,
round(A.ZCYBHS,2) ZCYBHS,	round(A.ZDCZGJY,2) ZDCZGJY,	A.ZDCZDJY ZDCZDJY,	A.ZYJJYCS ZYJJYCS,	A.ZYJQYSL ZYJQYSL,	A.ZYJCYSL ZYJCYSL,	
round(A.ZYJQYJE,2) ZYJQYJE,	round(A.ZYJCYJE,2) ZYJCYJE,	A.ZRJQYSL ZRJQYSL,	A.ZRJCYSL ZRJCYSL,	A.ZRJQYJE ZRJQYJE,	A.ZRJCYJE ZRJCYJE,
round(A.ZGBHQYBL,2) ZGBHQYBL,round(A.ZDBHQYBL,2) ZDBHQYBL,	A.ZJYJE ZJYJE,	A.ZJYLX ZJYLX,	A.ZCPLX ZCPLX,	A.ZQYZL ZQYZL,
round(A.ZCYZL,2) ZCYZL,	round(A.ZJYCS,2) ZJYCS,	A.ZFYSL ZFYSL,	A.ZPJDCJYSL ZPJDCJYSL,	A.ZPJDCJYJE ZPJDCJYJE,A.ZFYPJDBSL ZFYPJDBSL,
round(A.ZFYPJDBJE,2) ZFYPJDBJE,	round(A.ZZHFYGMTS,2) ZZHFYGMTS,	A.ZFYPJJE ZFYPJJE,	A.ZFYYJCS ZFYYJCS,	A.ZFYYJJE ZFYYJJE,	A.ZFYZGSPS ZFYZGSPS,	
round(A.ZRJGXE,2) ZRJGXE,	round(A.ZYJWZDLCS,2) ZYJWZDLCS,	A.ZZGDLTS ZZGDLTS,	A.ZSFAPPDL ZSFAPPDL,	A.ZSFBDWX ZSFBDWX,	A.ZTSCS ZTSCS,A.ZZHKFTHTS ZZHKFTHTS,
B.CENTER_ASSIGN   CLUSTER_ID
FROM #KHFX_KMEANS_DATA_TBL A INNER JOIN #PAL_KMEANS_ASSIGNED_TBL B ON A.ID = B.ID;
*/
SELECT ROUND(A.ZAGE,2) ZAGE ,A.G0XINGBIE G0XINGBIE,	
ROUND(A.ZSHOURU,2) ZSHOURU,	A.ZDIYU ZDIYU,	ROUND(A.ZZZBKSJ,2) ZZZBKSJ,	A.ZCLPP ZCLPP,
A.ZCLXH ZCLXH,	ROUND(A.ZCLGMSJ,2) ZCLGMSJ,	A.ZCZZY ZCZZY,	ROUND(A.ZCLSL,2) ZCLSL,	ROUND(A.ZJYKSL,2) ZJYKSL,	A.ZJYKLB ZJYKLB,	
ROUND(A.ZZJCZTS,2) ZZJCZTS,	ROUND(A.ZZQCZCS,2) ZZQCZCS,	ROUND(A.ZMDCZCS,2) ZMDCZCS,	ROUND(A.ZWZCZCS,2) ZWZCZCS,	
ROUND(A.ZQTCZCS,2) ZQTCZCS,	ROUND(A.ZZGCZJE,2) ZZGCZJE,
ROUND(A.ZPJCZJE,2) ZPJCZJE,	ROUND(A.ZRJYE,2) ZRJYE,	A.ZYJCZCS ZYJCZCS,	A.ZYKGMFYCS ZYKGMFYCS,	A.ZZHGYTS ZZHGYTS,	A.ZQYBHS ZQYBHS,
A.ZCYBHS ZCYBHS,	ROUND(A.ZDCZGJY,2) ZDCZGJY,	A.ZDCZDJY ZDCZDJY,	ROUND(A.ZYJJYCS,2) ZYJJYCS,	ROUND(A.ZYJQYSL,2) ZYJQYSL,	A.ZYJCYSL ZYJCYSL,	
A.ZYJQYJE ZYJQYJE,	A.ZYJCYJE ZYJCYJE,	A.ZRJQYSL ZRJQYSL,	A.ZRJCYSL ZRJCYSL,	A.ZRJQYJE ZRJQYJE,	A.ZRJCYJE ZRJCYJE,
A.ZGBHQYBL ZGBHQYBL,A.ZDBHQYBL ZDBHQYBL,	A.ZJYJE ZJYJE,	A.ZJYLX ZJYLX,	A.ZCPLX ZCPLX,	ROUND(A.ZQYZL,2) ZQYZL,
A.ZCYZL ZCYZL,	A.ZJYCS ZJYCS,	A.ZFYSL ZFYSL,	ROUND(A.ZPJDCJYSL,2) ZPJDCJYSL,	A.ZPJDCJYJE ZPJDCJYJE,A.ZFYPJDBSL ZFYPJDBSL,
A.ZFYPJDBJE ZFYPJDBJE,	A.ZZHFYGMTS ZZHFYGMTS,	A.ZFYPJJE ZFYPJJE,	A.ZFYYJCS ZFYYJCS,	A.ZFYYJJE ZFYYJJE,	A.ZFYZGSPS ZFYZGSPS,	
A.ZRJGXE ZRJGXE,	A.ZYJWZDLCS ZYJWZDLCS,	A.ZZGDLTS ZZGDLTS,	A.ZSFAPPDL ZSFAPPDL,	A.ZSFBDWX ZSFBDWX,	A.ZTSCS ZTSCS,A.ZZHKFTHTS ZZHKFTHTS,
B.CENTER_ASSIGN   CLUSTER_ID
FROM #KHFX_KMEANS_DATA_TBL A INNER JOIN #PAL_KMEANS_ASSIGNED_TBL B ON A.ID = B.ID;
--调用C4.5存储过程，分析决策树；
CREATE LOCAL TEMPORARY COLUMN TABLE #KHFQ_CONTROL_TBL_C45(
    "NAME" VARCHAR (100), 
    "INTARGS" INTEGER, 
    "DOUBLEARGS" DOUBLE, 
    "STRINGARGS" VARCHAR (100) );
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('THREAD_NUMBER',2,null,null);
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('SPLIT_THRESHOLD', null, 0.05, null);
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('MAX_DEPTH', 4, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('MIN_RECORDS_OF_PARENT', :MIN_RECORDS_OF_PARENT, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('MIN_RECORDS_OF_LEAF',:MIN_RECORDS_OF_LEAF, null, null);
INSERT INTO #KHFQ_CONTROL_TBL_C45 VALUES ('IS_OUTPUT_RULES', 1, null, null);
CREATE LOCAL TEMPORARY COLUMN TABLE #KHFX_C45_TREEMODEL_TBL ("ID" INT,"TREE_MODEL" clob);
CREATE LOCAL TEMPORARY COLUMN TABLE #KHFX_C45_PMMLMODEL_TBL("ID" INT,"TREE_MODEL" clob);
 KHFX_KMEANS_RESULT_C45 = SELECT * FROM  #KHFX_KMEANS_RESULT_C45;
 KHFQ_CONTROL_TBL_C45  = SELECT * FROM   #KHFQ_CONTROL_TBL_C45;
 KHFX_C45_TREEMODEL_TBL = SELECT * FROM    #KHFX_C45_TREEMODEL_TBL;
 KHFX_C45_PMMLMODEL_TBL = SELECT * FROM    #KHFX_C45_PMMLMODEL_TBL;
 --执行C45存储过程
CALL "SINOPEC_YPXS".ZKHFX_PAL_C45_KHFQ(:KHFX_KMEANS_RESULT_C45, :KHFQ_CONTROL_TBL_C45, 
:KHFX_C45_TREEMODEL_TBL, :KHFX_C45_PMMLMODEL_TBL) with OVERVIEW;
--取消JSON格式的输出
 --C45_JSON = select ID,TREE_MODEL JSON from :KHFX_C45_TREEMODEL_TBL;
 ARRAY_TMODEL := ARRAY_AGG(:KHFX_C45_PMMLMODEL_TBL.TREE_MODEL);
 ARRAY_ID     := ARRAY_AGG(:KHFX_C45_PMMLMODEL_TBL.ID);

     FOR V_INDEX IN 1 .. CARDINALITY(:ARRAY_TMODEL) DO
     SELECT replace ( :ARRAY_TMODEL[:V_INDEX],'(','' ) INTO LS_TMODEL1  FROM DUMMY;
     SELECT replace ( :LS_TMODEL1,')','' ) INTO LS_TMODEL2  FROM DUMMY;
     ARRAY_TMODEL[:V_INDEX] := :LS_TMODEL2;      
     END FOR;

 RS = UNNEST(:ARRAY_ID,:ARRAY_TMODEL) AS ("ID","PMML");
 C45_PMML = SELECT ID,PMML FROM :RS;
TABNAME2 := :RAND_OUT2;
TABNAME2_DETAIL := :RAND_OUT3;

DROP TABLE #KHFQ_CONTROL_TBL_KMEANS;
DROP TABLE #PAL_KMEANS_ASSIGNED_TBL;
DROP TABLE #PAL_KMEANS_CENTERS_TBL;
DROP TABLE #KHFX_KMEANS_RESULT_C45 ;
DROP TABLE #KHFX_KMEANS_DATA_TBL;
DROP TABLE #KHFQ_CONTROL_TBL_C45;
DROP TABLE #KHFX_C45_TREEMODEL_TBL;
DROP TABLE #KHFX_C45_PMMLMODEL_TBL;
END IF;
DROP TABLE #LS_GZKHBH1;
DROP TABLE #LS_GZKHBH2;

END;
